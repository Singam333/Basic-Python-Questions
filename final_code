{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter No. of rows in the first matrix: 2\n",
      "Enter No. of columns in the first matrix: 3\n",
      "2\n",
      "3\n",
      "6\n",
      "9\n",
      "3\n",
      "2\n",
      "[[2, 3, 6], [9, 3, 2]]\n",
      "Enter No. of rows in the second matrix: 3\n",
      "Enter No. of columns in the second matrix: 2\n",
      "2\n",
      "3\n",
      "6\n",
      "3\n",
      "2\n",
      "1\n",
      "[[2, 3], [6, 3], [2, 1]]\n",
      "the result is: [[34, 21], [40, 38]]\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "r1=int(input(\"Enter No. of rows in the first matrix: \"))\n",
    "c1=int(input(\"Enter No. of columns in the first matrix: \"))\n",
    "a = [[int(input()) for col in range(c1)] for row in range(r1)]\n",
    "print(a)\n",
    "r2=int(input (\"Enter No. of rows in the second matrix: \"))\n",
    "c2=int(input (\"Enter No. of columns in the second matrix: \"))\n",
    "b = [[int(input()) for col in range(c2)] for row in range(r2)]\n",
    "print(b)\n",
    "c=[[0 for col in range(c2)]for row in range(r1)]\n",
    "if (c1==r2):\n",
    "    for i in range(r1):\n",
    "        for j in range(c2):\n",
    "            c[i][j]=0\n",
    "            for k in range(c1):\n",
    "                c[i][j]+=a[i][k]*b[k][j]\n",
    "            \n",
    "    print(\"the result is:\",c)\n",
    "else:\n",
    "    print (\"Multiplication not possible\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "s=\"i am and a pradeep\"\n",
    "w=s.split()\n",
    "print(len(w))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "stop_words=[\"a\",\"and\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "words=[wo for wo in w if wo not in stop_words] \n",
    "print(len(words))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = [0,5,27,6,13,28,100,45,10,79]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "s=sum(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "B=[]\n",
    "for i in A:\n",
    "    B.append(i/s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "C=[]\n",
    "for i in B:\n",
    "    add=0\n",
    "    for j in range(B.index(i)+1):\n",
    "        add=add+B[j]\n",
    "    C.append(add)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "result=[]\n",
    "for j in range(100):\n",
    "    num=random.random()\n",
    "    for i in C:\n",
    "        if i>num:\n",
    "            result.append(A[C.index(i)])\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator\n",
    "def CountFrequency(my_list): \n",
    "  \n",
    "    # Creating an empty dictionary  \n",
    "    freq = {} \n",
    "    for item in my_list: \n",
    "        if (item in freq): \n",
    "            freq[item] += 1\n",
    "        else: \n",
    "            freq[item] = 1\n",
    "    freq = sorted(freq.items(), key=operator.itemgetter(1))\n",
    "    freq=dict(freq)\n",
    "  \n",
    "    for key, value in freq.items(): \n",
    "        print (\"% d : % d\"%(key, value))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 5 :  1\n",
      " 6 :  2\n",
      " 13 :  5\n",
      " 10 :  5\n",
      " 28 :  7\n",
      " 27 :  7\n",
      " 45 :  12\n",
      " 79 :  23\n",
      " 100 :  38\n"
     ]
    }
   ],
   "source": [
    "CountFrequency(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a stringiloveyou143\n",
      "###"
     ]
    }
   ],
   "source": [
    "str=input(\"enter a string\")\n",
    "x=len(str)\n",
    "y=list(str)\n",
    "for i in range(x):\n",
    "    if(y[i].isdigit()==True):\n",
    "        y[i]=\"#\"\n",
    "        print(y[i],end=\"\")\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter number of elements : 10\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "0\n",
      "['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n",
      "20\n",
      "30\n",
      "10\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "24\n",
      "35\n",
      "39\n",
      "[20, 30, 10, 40, 50, 60, 70, 24, 35, 39]\n",
      "{'1': 20, '2': 30, '3': 10, '4': 40, '5': 50, '6': 60, '7': 70, '8': 24, '9': 35, '0': 39}\n",
      "[('3', 10), ('1', 20), ('8', 24), ('2', 30), ('9', 35), ('0', 39), ('4', 40), ('5', 50), ('6', 60), ('7', 70)]\n",
      "the least 5 students are:\n",
      "[('3', 10), ('1', 20), ('8', 24), ('2', 30), ('9', 35)]\n",
      "the top 5 students are:\n",
      "[('0', 39), ('4', 40), ('5', 50), ('6', 60), ('7', 70)]\n",
      "[28.571428571428573, 42.857142857142854, 14.285714285714286, 57.142857142857146, 71.42857142857143, 85.71428571428571, 100.0, 34.285714285714285, 50.0, 55.714285714285715]\n",
      "the  students whose percentiles lies in range of 25-75 are:\n",
      "('3', 10)\n",
      "('1', 20)\n",
      "('2', 30)\n",
      "('9', 35)\n",
      "('5', 50)\n",
      "('6', 60)\n",
      "('7', 70)\n"
     ]
    }
   ],
   "source": [
    "import operator\n",
    "from operator import itemgetter\n",
    "from collections import OrderedDict\n",
    "students_list=[]\n",
    "n =int(input(\"Enter number of elements : \"))\n",
    "for i in range(0, n): \n",
    "    x = input() \n",
    "  \n",
    "    students_list.append(x) \n",
    "      \n",
    "print(students_list)\n",
    "\n",
    "marks_list=[]\n",
    "for i in range(0, n): \n",
    "    y = int(input()) \n",
    "  \n",
    "    marks_list.append(y) \n",
    "      \n",
    "print(marks_list)\n",
    "\n",
    "\n",
    "dictionary = dict(zip(students_list,marks_list))\n",
    "print(dictionary)\n",
    "sort=sorted(dictionary.items(), key=operator.itemgetter(1)) \n",
    "print(sort)\n",
    "\n",
    "\n",
    "least5 =sort[:5]\n",
    "print(\"the least 5 students are:\")\n",
    "print(least5)\n",
    "\n",
    "top5 =sort[5:10]\n",
    "print(\"the top 5 students are:\")\n",
    "\n",
    "print(top5)\n",
    "\n",
    "\n",
    "\n",
    "M =(max(marks_list))\n",
    "percentile_list=[]\n",
    "for i in range(n):\n",
    "    z=((marks_list[i])*100/M)\n",
    "    percentile_list.append(z)\n",
    "print(percentile_list)\n",
    "\n",
    "\n",
    "print(\"the  students whose percentiles lies in range of 25-75 are:\")\n",
    "\n",
    "for i in range(n):\n",
    "    if(percentile_list[i]>25.0 and percentile_list[i]<75.0):\n",
    "        print(sort[i])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(6, -7), (1, -1), (6, 0), (-5, -8), (-1, -1)]\n"
     ]
    }
   ],
   "source": [
    "S= [(1,2),(3,4),(-1,1),(6,-7),(0, 6),(-5,-8),(-1,-1),(6,0),(1,-1)]\n",
    "list1 = []\n",
    "list2 = []\n",
    "for i in S:\n",
    "   list1.append(i[0])\n",
    "   list2.append(i[1])\n",
    "P= (3,-4)\n",
    "import math\n",
    "distance=[]\n",
    "for i in range(len(list1)):\n",
    "    den=1\n",
    "    x=list1[i]\n",
    "    y=list2[i]\n",
    "    \n",
    "    p=3\n",
    "    q=-4\n",
    "    num=(𝑥*𝑝+𝑦*𝑞)\n",
    "    de=((𝑥**2+𝑦**2)**0.5)\n",
    "    den=de*5\n",
    "    \n",
    "    result=num/den\n",
    "    distance.append(math.acos(result))\n",
    "distance={i:distance[i] for i in range(len(distance))}\n",
    "\n",
    "distance=sorted(distance.items(),key=lambda x:x[1],reverse=False)\n",
    "list3 = []\n",
    "for i in distance[0:5]:\n",
    "   list3.append(i[0])\n",
    "list4=[]\n",
    "list5=[]\n",
    "for i in list3:\n",
    "    list4.append(list1[i])\n",
    "    list5.append(list2[i])\n",
    "final_5_points=list(zip(list4,list5))\n",
    "print(final_5_points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yes\n",
      "no\n",
      "no\n",
      "yes\n"
     ]
    }
   ],
   "source": [
    "Red= [(1,1),(2,1),(4,2),(2,4), (-1,4)]\n",
    "Blue= [(-2,-1),(-1,-2),(-3,-2),(-3,-1),(1,-3)]\n",
    "Lines=[\"1x+1y+0\",\"1x-1y+0\",\"1x+0y-3\",\"0x+1y-0.5\"]\n",
    "def split(word): \n",
    "    return [char for char in word]  \n",
    "\n",
    "for i in Lines:\n",
    "    l=[]\n",
    "    l1=[]\n",
    "    m=[]\n",
    "    m1=[]\n",
    "    s1=split(i)\n",
    "    x=int(s1[0])\n",
    "    if(s1[2]=='+'):\n",
    "        y=int(s1[3])\n",
    "    else:\n",
    "        y=-1*(int(s1[3]))\n",
    "    if(s1[5]=='+'):\n",
    "        intercept=int(s1[6])\n",
    "    else:\n",
    "        intercept=-1*(int(s1[6]))\n",
    "    for j in(Red):\n",
    "        l.append(x*j[0]+y*j[1]+intercept)\n",
    "    for k in(Blue):\n",
    "        l1.append(x*k[0]+y*k[1]+intercept)\n",
    "    for a in l:\n",
    "        if(a>0):\n",
    "            m.append(True)\n",
    "        else:\n",
    "            m.append(False)\n",
    "    for a in l1:\n",
    "        if(a<0):\n",
    "            m1.append(True)\n",
    "        else:\n",
    "            m1.append(False)\n",
    "    n=all(m)\n",
    "    n1=all(m1)\n",
    "    if(n==True and n1==True):\n",
    "        print(\"yes\")\n",
    "\n",
    "    else:\n",
    "        print(\"no\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6.0, 6.0, 6.0, 6.0]\n",
      "[20.0, 20.0, 20.0, 20.0, 20.0]\n",
      "[16.0, 16.0, 16.0, 16.0, 16.0]\n",
      "[10.0, 10.0, 12.0, 12.0, 12.0, 12.0, 4.0, 4.0, 4.0]\n"
     ]
    }
   ],
   "source": [
    "def fun(x, a, b):\n",
    "    if a == -1:\n",
    "        v = float(x[b])/(b+1)\n",
    "        for i in range(a+1,b+1):\n",
    "            x[i] = v\n",
    "    elif b == -1:\n",
    "        v = float(x[a])/(len(x)-a)\n",
    "        for i in range(a, len(x)):\n",
    "            x[i] = v\n",
    "    else:\n",
    "        v = (float(x[a])+float(x[b]))/(b-a+1)\n",
    "        for i in range(a,b+1):\n",
    "            x[i] = v\n",
    "    return x\n",
    "def replace(text):\n",
    "    # Create array from the string\n",
    "    x = text.replace(\" \",\"\").split(\",\")\n",
    "    # Get all the pairs of indices having number\n",
    "    y = [i for i, v in enumerate(x) if v != '_']\n",
    "    # Starting with _ ?\n",
    "    if y[0] != 0:\n",
    "        y = [-1] + y\n",
    "    # Ending with _ ?\n",
    "    if y[-1] != len(x)-1:\n",
    "        y = y + [-1]    \n",
    "    # run over all the pairs\n",
    "    for (a, b) in zip(y[:-1], y[1:]): \n",
    "        fun(x,a,b)          \n",
    "    return x\n",
    "\n",
    "tests = [\n",
    "    \"_,_,_,24\",\n",
    "    \"40,_,_,_,60\",\n",
    "    \"80,_,_,_,_\",\n",
    "     \"_,_,30,_,_,_,50,_,_\"]\n",
    "\n",
    "for i in tests:\n",
    "    print (replace(i))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('P(F=F1|S==S1)', 0.5), ('P(F=F1|S==S2)', 0.25), ('P(F=F1|S==S3)', 0.16666666666666666), ('P(F=F2|S==S1)', 1.5), ('P(F=F2|S==S2)', 0.75), ('P(F=F2|S==S3)', 0.5), ('P(F=F3|S==S1)', 2.5), ('P(F=F3|S==S2)', 1.25), ('P(F=F3|S==S3)', 0.8333333333333334), ('P(F=F4|S==S1)', 3.5), ('P(F=F4|S==S2)', 1.75), ('P(F=F4|S==S3)', 1.1666666666666667), ('P(F=F5|S==S3)', 4.0), ('P(F=F5|S==S2)', 2.0), ('P(F=F5|S==S3)', 1.3333333333333333)]\n"
     ]
    }
   ],
   "source": [
    "l=[[1,2],[3,4],[5,6],[7,2],[8,4],[1,6],[3,6],[1,2],[5,2],[3,2]]\n",
    "t = [tuple(i) for i in l ]\n",
    "d=(list(zip(*t)))\n",
    "l1=list(d[0])\n",
    "a=[]\n",
    "b=[]\n",
    "l3=(d[1])\n",
    "value=[]\n",
    "for i in l1:\n",
    "    if i not in a:\n",
    "        a.append(i)\n",
    "for i in l3:\n",
    "    if i not in b:\n",
    "        b.append(i)\n",
    "for i in range(len(a)):\n",
    "    for j in range(len(b)):\n",
    "        \n",
    "        result=a[i]/b[j]\n",
    "        value.append(result)\n",
    "\n",
    "c=['P(F=F1|S==S1)','P(F=F1|S==S2)','P(F=F1|S==S3)','P(F=F2|S==S1)','P(F=F2|S==S2)','P(F=F2|S==S3)','P(F=F3|S==S1)'\n",
    "   ,'P(F=F3|S==S2)','P(F=F3|S==S3)','P(F=F4|S==S1)','P(F=F4|S==S2)','P(F=F4|S==S3)','P(F=F5|S==S3)','P(F=F5|S==S2)'\n",
    "   ,'P(F=F5|S==S3)']\n",
    "\n",
    "print(list(zip(c,value)))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter sentence 1i can do it\n",
      "enter sentence 2i will do it\n",
      "{'do', 'i', 'it', 'can'}\n",
      "{'will', 'i', 'it', 'do'}\n",
      "no of common words between 2 sentences are\n",
      "3\n",
      "words which are not in sentence 2 and present in sentence 1 are\n",
      "{'can'}\n",
      "words which are not in sentence 1 and present in sentence 2 are\n",
      "{'will'}\n"
     ]
    }
   ],
   "source": [
    "sentence1=input(\"enter sentence 1\")\n",
    "\n",
    "sentence2=input(\"enter sentence 2\")\n",
    "\n",
    "sentence1_words = set(sentence1.split())\n",
    "\n",
    "print(sentence1_words)\n",
    "\n",
    "sentence2_words = set(sentence2.split())\n",
    "\n",
    "print(sentence2_words)\n",
    "\n",
    "common = sentence1_words & sentence2_words\n",
    "\n",
    "y = len(common)\n",
    "\n",
    "print(\"no of common words between 2 sentences are\")\n",
    "print(y)\n",
    "\n",
    "print(\"words which are not in sentence 2 and present in sentence 1 are\")\n",
    "print(sentence1_words-common)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print(\"words which are not in sentence 1 and present in sentence 2 are\")\n",
    "\n",
    "print(sentence2_words-common)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.42430993457031635\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "l=[[1, 0.4], [0, 0.5], [0, 0.9], [0, 0.3], [0, 0.6], [1, 0.1], [1, 0.9], [1, 0.8]]\n",
    "result=[]\n",
    "for i in range(len(l)):\n",
    "    Y=l[i][0]\n",
    "    Yscore=l[i][1]\n",
    "    result.append((Y*math.log10(Yscore))+(1-(Y))*math.log10(1+(-Yscore)))\n",
    "print(-1*(sum(result))/len(l))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
